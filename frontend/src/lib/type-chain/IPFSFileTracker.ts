/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IPFSFileTracker {
  export type FileReferenceStruct = {
    fileId: BytesLike;
    cid: string;
    action: BigNumberish;
    fileType: BigNumberish;
    fileName: string;
    timestamp: BigNumberish;
    blockHash: BytesLike;
    exists: boolean;
    isDeleted: boolean;
  };

  export type FileReferenceStructOutput = [
    fileId: string,
    cid: string,
    action: bigint,
    fileType: bigint,
    fileName: string,
    timestamp: bigint,
    blockHash: string,
    exists: boolean,
    isDeleted: boolean
  ] & {
    fileId: string;
    cid: string;
    action: bigint;
    fileType: bigint;
    fileName: string;
    timestamp: bigint;
    blockHash: string;
    exists: boolean;
    isDeleted: boolean;
  };
}

export interface IPFSFileTrackerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getFileReference"
      | "getLatestFileReference"
      | "getOwner"
      | "isFileDeleted"
      | "recordFileAction"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "FileActionRecorded"): EventFragment;

  encodeFunctionData(
    functionFragment: "getFileReference",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestFileReference",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isFileDeleted",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "recordFileAction",
    values: [string, BigNumberish, BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "getFileReference",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestFileReference",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isFileDeleted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recordFileAction",
    data: BytesLike
  ): Result;
}

export namespace FileActionRecordedEvent {
  export type InputTuple = [
    fileId: BytesLike,
    action: BigNumberish,
    cid: string,
    fileType: BigNumberish,
    fileName: string,
    timestamp: BigNumberish,
    blockHash: BytesLike
  ];
  export type OutputTuple = [
    fileId: string,
    action: bigint,
    cid: string,
    fileType: bigint,
    fileName: string,
    timestamp: bigint,
    blockHash: string
  ];
  export interface OutputObject {
    fileId: string;
    action: bigint;
    cid: string;
    fileType: bigint;
    fileName: string;
    timestamp: bigint;
    blockHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IPFSFileTracker extends BaseContract {
  connect(runner?: ContractRunner | null): IPFSFileTracker;
  waitForDeployment(): Promise<this>;

  interface: IPFSFileTrackerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFileReference: TypedContractMethod<
    [_fileId: BytesLike],
    [IPFSFileTracker.FileReferenceStructOutput],
    "view"
  >;

  getLatestFileReference: TypedContractMethod<
    [_cid: string],
    [IPFSFileTracker.FileReferenceStructOutput],
    "view"
  >;

  getOwner: TypedContractMethod<[], [string], "view">;

  isFileDeleted: TypedContractMethod<[_cid: string], [boolean], "view">;

  recordFileAction: TypedContractMethod<
    [
      _cid: string,
      _action: BigNumberish,
      _fileType: BigNumberish,
      _fileName: string
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getFileReference"
  ): TypedContractMethod<
    [_fileId: BytesLike],
    [IPFSFileTracker.FileReferenceStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLatestFileReference"
  ): TypedContractMethod<
    [_cid: string],
    [IPFSFileTracker.FileReferenceStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isFileDeleted"
  ): TypedContractMethod<[_cid: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "recordFileAction"
  ): TypedContractMethod<
    [
      _cid: string,
      _action: BigNumberish,
      _fileType: BigNumberish,
      _fileName: string
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "FileActionRecorded"
  ): TypedContractEvent<
    FileActionRecordedEvent.InputTuple,
    FileActionRecordedEvent.OutputTuple,
    FileActionRecordedEvent.OutputObject
  >;

  filters: {
    "FileActionRecorded(bytes32,uint8,string,uint8,string,uint256,bytes32)": TypedContractEvent<
      FileActionRecordedEvent.InputTuple,
      FileActionRecordedEvent.OutputTuple,
      FileActionRecordedEvent.OutputObject
    >;
    FileActionRecorded: TypedContractEvent<
      FileActionRecordedEvent.InputTuple,
      FileActionRecordedEvent.OutputTuple,
      FileActionRecordedEvent.OutputObject
    >;
  };
}
